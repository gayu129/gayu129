{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "769070f5",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:16.545104Z",
     "iopub.status.busy": "2024-09-12T15:50:16.544416Z",
     "iopub.status.idle": "2024-09-12T15:50:17.011114Z",
     "shell.execute_reply": "2024-09-12T15:50:17.009970Z"
    },
    "papermill": {
     "duration": 0.479165,
     "end_time": "2024-09-12T15:50:17.014006",
     "exception": false,
     "start_time": "2024-09-12T15:50:16.534841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "42e7a606",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:17.028957Z",
     "iopub.status.busy": "2024-09-12T15:50:17.028386Z",
     "iopub.status.idle": "2024-09-12T15:50:17.100530Z",
     "shell.execute_reply": "2024-09-12T15:50:17.099258Z"
    },
    "papermill": {
     "duration": 0.083577,
     "end_time": "2024-09-12T15:50:17.103496",
     "exception": false,
     "start_time": "2024-09-12T15:50:17.019919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>movie_id</th>\n",
       "      <th>rating</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>production_countries</th>\n",
       "      <th>release_year</th>\n",
       "      <th>overview</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93787</td>\n",
       "      <td>gods+and+monsters+1998</td>\n",
       "      <td>4</td>\n",
       "      <td>Drama</td>\n",
       "      <td>Lions Gate Films Flashpoint (I) Showtime Networks</td>\n",
       "      <td>United Kingdom United States of America</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>It's 1957, and Whale's heyday as the director ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>197858</td>\n",
       "      <td>stargate+1994</td>\n",
       "      <td>3</td>\n",
       "      <td>Action Adventure Science Fiction</td>\n",
       "      <td>Centropolis Entertainment StudioCanal Carolco ...</td>\n",
       "      <td>France United States of America</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>An interstellar teleportation device, found in...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>76204</td>\n",
       "      <td>toy+story+1995</td>\n",
       "      <td>3</td>\n",
       "      <td>Animation Comedy Family</td>\n",
       "      <td>Pixar Animation Studios</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>Led by Woody, Andy's toys live happily in his ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>667201</td>\n",
       "      <td>friends+with+benefits+2011</td>\n",
       "      <td>4</td>\n",
       "      <td>Romance Comedy</td>\n",
       "      <td>Castle Rock Entertainment Screen Gems Olive Br...</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Jamie is a New York-based executive recruiter ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>336750</td>\n",
       "      <td>sleeper+1973</td>\n",
       "      <td>4</td>\n",
       "      <td>Comedy Romance Science Fiction</td>\n",
       "      <td>Rollins-Joffe Productions</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>1973.0</td>\n",
       "      <td>Miles Monroe, a clarinet-playing health food s...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id                    movie_id  rating  \\\n",
       "0    93787      gods+and+monsters+1998       4   \n",
       "1   197858               stargate+1994       3   \n",
       "2    76204              toy+story+1995       3   \n",
       "3   667201  friends+with+benefits+2011       4   \n",
       "4   336750                sleeper+1973       4   \n",
       "\n",
       "                             genres  \\\n",
       "0                             Drama   \n",
       "1  Action Adventure Science Fiction   \n",
       "2           Animation Comedy Family   \n",
       "3                    Romance Comedy   \n",
       "4    Comedy Romance Science Fiction   \n",
       "\n",
       "                                production_companies  \\\n",
       "0  Lions Gate Films Flashpoint (I) Showtime Networks   \n",
       "1  Centropolis Entertainment StudioCanal Carolco ...   \n",
       "2                            Pixar Animation Studios   \n",
       "3  Castle Rock Entertainment Screen Gems Olive Br...   \n",
       "4                          Rollins-Joffe Productions   \n",
       "\n",
       "                      production_countries  release_year  \\\n",
       "0  United Kingdom United States of America        1998.0   \n",
       "1          France United States of America        1994.0   \n",
       "2                 United States of America        1995.0   \n",
       "3                 United States of America        2011.0   \n",
       "4                 United States of America        1973.0   \n",
       "\n",
       "                                            overview  \n",
       "0  It's 1957, and Whale's heyday as the director ...  \n",
       "1  An interstellar teleportation device, found in...  \n",
       "2  Led by Woody, Andy's toys live happily in his ...  \n",
       "3  Jamie is a New York-based executive recruiter ...  \n",
       "4  Miles Monroe, a clarinet-playing health food s...  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = pd.read_csv(\"/kaggle/input/movie-rating-prediction-with-ludwig/ratings_sample.csv\")\n",
    "dataset.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "76eb762c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:17.118544Z",
     "iopub.status.busy": "2024-09-12T15:50:17.117909Z",
     "iopub.status.idle": "2024-09-12T15:50:17.149212Z",
     "shell.execute_reply": "2024-09-12T15:50:17.147874Z"
    },
    "papermill": {
     "duration": 0.041995,
     "end_time": "2024-09-12T15:50:17.152077",
     "exception": false,
     "start_time": "2024-09-12T15:50:17.110082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1998 entries, 0 to 1997\n",
      "Data columns (total 8 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   user_id               1998 non-null   int64  \n",
      " 1   movie_id              1998 non-null   object \n",
      " 2   rating                1998 non-null   int64  \n",
      " 3   genres                1996 non-null   object \n",
      " 4   production_companies  1985 non-null   object \n",
      " 5   production_countries  1994 non-null   object \n",
      " 6   release_year          1998 non-null   float64\n",
      " 7   overview              1997 non-null   object \n",
      "dtypes: float64(1), int64(2), object(5)\n",
      "memory usage: 125.0+ KB\n"
     ]
    }
   ],
   "source": [
    "dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ba71fc91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:17.166172Z",
     "iopub.status.busy": "2024-09-12T15:50:17.165735Z",
     "iopub.status.idle": "2024-09-12T15:50:18.929054Z",
     "shell.execute_reply": "2024-09-12T15:50:18.927779Z"
    },
    "papermill": {
     "duration": 1.773872,
     "end_time": "2024-09-12T15:50:18.932022",
     "exception": false,
     "start_time": "2024-09-12T15:50:17.158150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/1431528539.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  dataset['overview'].fillna('', inplace=True)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "dataset['overview'].fillna('', inplace=True)\n",
    "encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\n",
    "encoded_genres = encoder.fit_transform(dataset[['genres']])\n",
    "encoded_countries = encoder.fit_transform(dataset[['production_countries']])\n",
    "tfidf = TfidfVectorizer(max_features=500)\n",
    "overview_tfidf = tfidf.fit_transform(dataset['overview']).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26d26ad2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:18.946524Z",
     "iopub.status.busy": "2024-09-12T15:50:18.945909Z",
     "iopub.status.idle": "2024-09-12T15:50:18.984308Z",
     "shell.execute_reply": "2024-09-12T15:50:18.983042Z"
    },
    "papermill": {
     "duration": 0.048963,
     "end_time": "2024-09-12T15:50:18.987383",
     "exception": false,
     "start_time": "2024-09-12T15:50:18.938420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features = pd.concat([\n",
    "    dataset[['user_id', 'release_year']],\n",
    "    pd.DataFrame(encoded_genres, index=dataset.index),\n",
    "    pd.DataFrame(encoded_countries, index=dataset.index),\n",
    "    pd.DataFrame(overview_tfidf, index=dataset.index)\n",
    "], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "09ed85ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:19.001780Z",
     "iopub.status.busy": "2024-09-12T15:50:19.001299Z",
     "iopub.status.idle": "2024-09-12T15:50:19.113868Z",
     "shell.execute_reply": "2024-09-12T15:50:19.112506Z"
    },
    "papermill": {
     "duration": 0.123155,
     "end_time": "2024-09-12T15:50:19.116774",
     "exception": false,
     "start_time": "2024-09-12T15:50:18.993619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>release_year</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>...</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>93787</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.147572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>197858</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>76204</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>667201</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.370668</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>336750</td>\n",
       "      <td>1973.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.270984</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.306544</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1993</th>\n",
       "      <td>584138</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1994</th>\n",
       "      <td>440326</td>\n",
       "      <td>1982.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1995</th>\n",
       "      <td>5132</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>764247</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>858562</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1998 rows × 1066 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id  release_year    0    1    2    3    4    5    6    7  ...  490  \\\n",
       "0       93787        1998.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "1      197858        1994.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "2       76204        1995.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "3      667201        2011.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "4      336750        1973.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "...       ...           ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
       "1993   584138        2003.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "1994   440326        1982.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "1995     5132        1994.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "1996   764247        1985.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "1997   858562        1994.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
       "\n",
       "      491       492  493  494       495  496       497  498       499  \n",
       "0     0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.147572  \n",
       "1     0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
       "2     0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
       "3     0.0  0.000000  0.0  0.0  0.000000  0.0  0.370668  0.0  0.000000  \n",
       "4     0.0  0.270984  0.0  0.0  0.306544  0.0  0.000000  0.0  0.000000  \n",
       "...   ...       ...  ...  ...       ...  ...       ...  ...       ...  \n",
       "1993  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
       "1994  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
       "1995  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
       "1996  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
       "1997  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
       "\n",
       "[1998 rows x 1066 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features = features.replace([np.inf, -np.inf], np.nan).dropna()\n",
    "features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "880b8e04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:19.132682Z",
     "iopub.status.busy": "2024-09-12T15:50:19.132214Z",
     "iopub.status.idle": "2024-09-12T15:50:19.159706Z",
     "shell.execute_reply": "2024-09-12T15:50:19.158372Z"
    },
    "papermill": {
     "duration": 0.038843,
     "end_time": "2024-09-12T15:50:19.162647",
     "exception": false,
     "start_time": "2024-09-12T15:50:19.123804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      user_id  release_year    0    1    2    3    4    5    6    7  ...  490  \\\n",
      "0       93787        1998.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "1      197858        1994.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "2       76204        1995.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "3      667201        2011.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "4      336750        1973.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "...       ...           ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
      "1993   584138        2003.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "1994   440326        1982.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "1995     5132        1994.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "1996   764247        1985.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "1997   858562        1994.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0   \n",
      "\n",
      "      491       492  493  494       495  496       497  498       499  \n",
      "0     0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.147572  \n",
      "1     0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
      "2     0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
      "3     0.0  0.000000  0.0  0.0  0.000000  0.0  0.370668  0.0  0.000000  \n",
      "4     0.0  0.270984  0.0  0.0  0.306544  0.0  0.000000  0.0  0.000000  \n",
      "...   ...       ...  ...  ...       ...  ...       ...  ...       ...  \n",
      "1993  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
      "1994  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
      "1995  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
      "1996  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
      "1997  0.0  0.000000  0.0  0.0  0.000000  0.0  0.000000  0.0  0.000000  \n",
      "\n",
      "[1998 rows x 1066 columns]\n"
     ]
    }
   ],
   "source": [
    "X = features\n",
    "print(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6c7cf6fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:19.178697Z",
     "iopub.status.busy": "2024-09-12T15:50:19.178197Z",
     "iopub.status.idle": "2024-09-12T15:50:19.185675Z",
     "shell.execute_reply": "2024-09-12T15:50:19.184513Z"
    },
    "papermill": {
     "duration": 0.018685,
     "end_time": "2024-09-12T15:50:19.188357",
     "exception": false,
     "start_time": "2024-09-12T15:50:19.169672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       4\n",
      "1       3\n",
      "2       3\n",
      "3       4\n",
      "4       4\n",
      "       ..\n",
      "1993    3\n",
      "1994    5\n",
      "1995    3\n",
      "1996    5\n",
      "1997    4\n",
      "Name: rating, Length: 1998, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "y = dataset['rating']\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7411acb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:19.205257Z",
     "iopub.status.busy": "2024-09-12T15:50:19.204802Z",
     "iopub.status.idle": "2024-09-12T15:50:19.330610Z",
     "shell.execute_reply": "2024-09-12T15:50:19.328975Z"
    },
    "papermill": {
     "duration": 0.137647,
     "end_time": "2024-09-12T15:50:19.333504",
     "exception": false,
     "start_time": "2024-09-12T15:50:19.195857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40db44ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:19.349956Z",
     "iopub.status.busy": "2024-09-12T15:50:19.349486Z",
     "iopub.status.idle": "2024-09-12T15:50:19.366077Z",
     "shell.execute_reply": "2024-09-12T15:50:19.364737Z"
    },
    "papermill": {
     "duration": 0.028301,
     "end_time": "2024-09-12T15:50:19.368930",
     "exception": false,
     "start_time": "2024-09-12T15:50:19.340629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_train[['user_id', 'release_year']] = scaler.fit_transform(X_train[['user_id', 'release_year']])\n",
    "X_test[['user_id', 'release_year']] = scaler.transform(X_test[['user_id', 'release_year']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7ae016b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:19.385672Z",
     "iopub.status.busy": "2024-09-12T15:50:19.385205Z",
     "iopub.status.idle": "2024-09-12T15:50:19.399639Z",
     "shell.execute_reply": "2024-09-12T15:50:19.398264Z"
    },
    "papermill": {
     "duration": 0.026164,
     "end_time": "2024-09-12T15:50:19.402657",
     "exception": false,
     "start_time": "2024-09-12T15:50:19.376493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "if isinstance(X_train, pd.DataFrame):\n",
    "    X_train = X_train.to_numpy()\n",
    "\n",
    "if isinstance(X_test, pd.DataFrame):\n",
    "    X_test = X_test.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "df644a64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:19.419312Z",
     "iopub.status.busy": "2024-09-12T15:50:19.418827Z",
     "iopub.status.idle": "2024-09-12T15:50:20.119925Z",
     "shell.execute_reply": "2024-09-12T15:50:20.118234Z"
    },
    "papermill": {
     "duration": 0.714116,
     "end_time": "2024-09-12T15:50:20.123902",
     "exception": false,
     "start_time": "2024-09-12T15:50:19.409786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 3.843644517008441e+21\n",
      "R-squared: -3.4718133113616125e+21\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f'Mean Squared Error: {mse}')\n",
    "print(f'R-squared: {r2}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ddd138fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:20.183599Z",
     "iopub.status.busy": "2024-09-12T15:50:20.182789Z",
     "iopub.status.idle": "2024-09-12T15:50:21.103934Z",
     "shell.execute_reply": "2024-09-12T15:50:21.102749Z"
    },
    "papermill": {
     "duration": 0.960649,
     "end_time": "2024-09-12T15:50:21.106914",
     "exception": false,
     "start_time": "2024-09-12T15:50:20.146265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.scatterplot(x='release_year', y='rating', data=dataset,color='red')\n",
    "plt.title('Scatter Plot of Rating vs Release Year')\n",
    "plt.xlabel('Release Year')\n",
    "plt.ylabel('Rating')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "24d385e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T15:50:21.125025Z",
     "iopub.status.busy": "2024-09-12T15:50:21.124358Z",
     "iopub.status.idle": "2024-09-12T15:50:21.512875Z",
     "shell.execute_reply": "2024-09-12T15:50:21.511663Z"
    },
    "papermill": {
     "duration": 0.400918,
     "end_time": "2024-09-12T15:50:21.515985",
     "exception": false,
     "start_time": "2024-09-12T15:50:21.115067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,6))\n",
    "sns.histplot(dataset['release_year'], bins=20, kde=True)\n",
    "plt.title('Distribution of Release Year')\n",
    "plt.xlabel('Release Year')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1993817,
     "sourceId": 3294516,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.958961,
   "end_time": "2024-09-12T15:50:22.249339",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-12T15:50:13.290378",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
